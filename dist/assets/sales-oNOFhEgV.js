import{c as I}from"./supabase-Cmt-ljYz.js";const E="https://iugjtokydvbcvmrpeziv.supabase.co",b="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1Z2p0b2t5ZHZiY3ZtcnBleml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTk3NjUsImV4cCI6MjA2MTI5NTc2NX0.XCNQoJbGQiXuyR_CFevro1Y8lqvh2_jmjrD181UYtY4";let m=null;const v=()=>m||(console.log("Initializing Supabase client:",{url:E,keyLength:b.length,timestamp:new Date().toISOString()}),m=I(E,b,{auth:{persistSession:!0,autoRefreshToken:!0,detectSessionInUrl:!0,storage:window.localStorage},global:{headers:{"X-Client-Info":"dasboard-app"}}}),m),l=v(),p=new Map;let $=new Set;const C=async()=>{try{const{data:{user:r},error:t}=await l.auth.getUser();if(t)return console.error("Error getting user:",t),null;if(!r)return null;if(p.has(r.id)){const e=p.get(r.id);return console.log("Using cached role for user:",{userId:r.id,role:e}),{...r,role:e}}const o=`role-${r.id}`;if($.has(o))return console.warn("Avoiding duplicate role request for user:",r.id),{...r,role:null};$.add(o);try{const{data:e,error:n}=await l.from("profiles").select("role").eq("id",r.id).single();if(n){console.error("Error fetching user role:",n);const{data:s,error:i}=await l.from("users").select("role_id").eq("id",r.id).single();if(!i&&(s!=null&&s.role_id)){const{data:a}=await l.from("roles").select("name").eq("id",s.role_id).single();if(a!=null&&a.name)return p.set(r.id,a.name),{...r,role:a.name}}return p.set(r.id,"viewer"),{...r,role:"viewer"}}return p.set(r.id,e.role),{...r,role:e.role}}finally{$.delete(o)}}catch(r){return console.error("Error in getCurrentUser:",r),null}},U=r=>/(@exampletest\.com|@example\.com|test.*@)/.test(r.toLowerCase()),R=async(r,t)=>{try{if(console.log(`[supabaseClient] Logging in test user: ${r}`),!U(r))return console.warn("[supabaseClient] This is not a test email, should use regular login"),{error:new Error("Not a test email")};const o=r.toLowerCase().includes("group")&&r.toLowerCase().includes("@exampletest.com");o&&(console.log(`[supabaseClient] ${r} - detected as a group admin by email pattern`),localStorage.setItem("force_redirect_after_login","/group-admin"),localStorage.setItem("force_redirect_timestamp",Date.now().toString()));const{data:e,error:n}=await l.auth.signInWithPassword({email:r,password:t,options:{persistSession:!0}});if(!n&&(e!=null&&e.user)){if(console.log(`[supabaseClient] Sign-in successful for ${r}, checking group admin status`),o){console.log(`[supabaseClient] Setting group admin metadata for ${r}`);try{const{data:s,error:i}=await l.auth.updateUser({data:{is_group_admin:!0,role:"dealer_group_admin"}});i?console.warn("[supabaseClient] Could not update user metadata:",i):console.log("[supabaseClient] Updated user metadata for group admin:",s);const{error:a}=await l.from("profiles").update({is_group_admin:!0,role:"dealer_group_admin"}).eq("id",e.user.id);a?console.warn("[supabaseClient] Could not update profile:",a):console.log("[supabaseClient] Updated profile for group admin")}catch(s){console.error("[supabaseClient] Error setting group admin status:",s)}return console.log("[supabaseClient] Performing immediate redirect for group admin test user"),sessionStorage.setItem("auth_redirect_authorized","true"),setTimeout(()=>{window.location.href="/test-login-redirect"},500),{data:{...e,user:{...e.user,user_metadata:{...e.user.user_metadata,is_group_admin:!0,role:"dealer_group_admin"}}},isGroupAdmin:!0,forceRedirect:!0,redirectPath:"/test-login-redirect",message:"Group admin test user logged in successfully"}}console.log(`[supabaseClient] Checking group admin status for ${r}`);try{const{data:s,error:i}=await l.from("profiles").select("is_group_admin, role, dealership_id").eq("id",e.user.id).maybeSingle();if(console.log("[supabaseClient] Test user profile data:",s),s!=null&&s.is_group_admin){console.log(`[supabaseClient] User ${r} is a group admin`);const{data:a,error:u}=await l.auth.updateUser({data:{is_group_admin:!0,role:s.role||"dealer_group_admin"}});return u?console.warn("[supabaseClient] Could not update user metadata:",u):console.log("[supabaseClient] Updated user metadata for group admin"),{data:e,isGroupAdmin:!0,message:"Group admin test user logged in successfully"}}}catch(s){console.error("[supabaseClient] Error checking group admin status:",s)}return{data:e,message:"Test user logged in successfully"}}return e!=null&&e.session?{data:e,message:"Test user logged in successfully"}:{error:n,message:"Failed to log in test user"}}catch(o){return console.error("[supabaseClient] Exception in loginTestUser:",o),{error:o instanceof Error?o:new Error("Unknown error during test login")}}};async function D(){const{error:r}=await l.auth.signOut();if(r)throw console.error("Sign out error:",r),r}const F=async(r,t)=>{try{console.log(`[apiService] Logging schema operation: ${r}`,t);try{const{data:o,error:e}=await l.from("logs").insert({action:r,details:t}).select().single();return e?(console.log("[apiService] Error logging schema operation, continuing silently:",e.message),!0):(console.log("[apiService] Logged schema operation:",o),!0)}catch{return console.log("[apiService] Schema operation logging failed, continuing silently"),!0}}catch{return console.log("[apiService] Exception in logSchemaOperation, continuing silently"),!0}},T=async(r,t,o)=>{console.log("[apiService] Getting deals for user:",r,"from:",t,"to:",o);try{const{data:e,error:n}=await l.from("deals").select("*").eq("salesperson_id",r).gte("sale_date",t).lte("sale_date",o);if(n)throw console.error("[apiService] Error fetching deals:",n),n;return console.log(`[apiService] Found ${(e==null?void 0:e.length)||0} deals`),e||[]}catch(e){throw console.error("[apiService] Unexpected error fetching deals:",e),e}},O=async(r,t,o)=>{console.log("[apiService] Getting days off for user:",r);try{const{data:e,error:n}=await l.from("schedule").select("*").eq("user_id",r).gte("date",t).lte("date",o).eq("is_day_off",!0);if(n)return console.error("[apiService] Error fetching schedule:",n),[5,8,15,18,25,27,29];const s=(e==null?void 0:e.map(i=>new Date(i.date).getDate()))||[];return console.log("[apiService] Days off this month:",s),s.length===0?(console.log("[apiService] No days off found, using default pattern"),[5,8,15,18,25,27,29]):s}catch(e){return console.error("[apiService] Unexpected error fetching schedule:",e),[5,8,15,18,25,27,29]}},M=(r,t)=>{let o=0;for(let e=1;e<=Math.min(10,r);e++)!t.includes(e)&&e%3===0&&o++;if(r>10)for(let e=11;e<=Math.min(20,r);e++)!t.includes(e)&&e%2===0&&o++;if(r>20)for(let e=21;e<=r;e++)t.includes(e)||o++;return console.log(`[apiService] Expected sales by day ${r}:`,o),o},q=(r,t,o,e=15)=>{const n=M(t,o),s=r.length,i=s/(n||1);let a="neutral";i>=1?a="on-track":i>=.8?a="slightly-behind":a="behind";const u=Math.min(100,Math.round(s/e*100));return console.log("[apiService] Goal progress calculation:",{currentDay:t,expectedSales:n,actualSales:s,progressRatio:i,status:a,progressPercentage:u}),{expected:n,actual:s,progress:u,status:a,progressRatio:i}},G=async r=>{const t=new Date,o=t.getFullYear(),e=t.getMonth(),n=t.getDate(),s=new Date(o,e,1).toISOString().split("T")[0],i=new Date(o,e+1,0).toISOString().split("T")[0];try{const[a,u]=await Promise.all([T(r,s,i),O(r,s,i)]),h=q(a,n,u);return{deals:a,daysOff:u,progressMetrics:h,daysInMonth:new Date(o,e+1,0).getDate(),currentDay:n}}catch(a){throw console.error("[apiService] Error in getGoalTrackingData:",a),a}},L=async(r,t)=>{try{console.log(`[apiService] Logging finance manager deal to schema: ${r}`);const o=await C();if(!o)throw new Error("Not authenticated");const e={user_id:o.id,deal_number:t.deal_number||`D${Math.floor(1e3+Math.random()*9e3)}`,stock_number:t.stock_number||"",vin:t.vin||"",customer_name:t.customer_name,vehicle:t.vehicle,sale_date:t.sale_date||new Date().toISOString().split("T")[0],amount:t.amount||0,products:t.products?JSON.stringify(t.products):"[]",profit:t.profit||0,status:t.status||"pending",deal_details:t.deal_details?JSON.stringify(t.deal_details):"{}",created_at:new Date().toISOString(),updated_at:new Date().toISOString()},n=`
      INSERT INTO "${r}".deals (
        user_id, deal_number, stock_number, vin, customer_name, 
        vehicle, sale_date, amount, products, profit, 
        status, deal_details, created_at, updated_at
      ) 
      VALUES (
        '${e.user_id}', 
        '${e.deal_number}', 
        '${e.stock_number}', 
        '${e.vin}', 
        '${e.customer_name}', 
        '${e.vehicle}', 
        '${e.sale_date}', 
        ${e.amount}, 
        '${e.products}', 
        ${e.profit}, 
        '${e.status}', 
        '${e.deal_details}',
        '${e.created_at}',
        '${e.updated_at}'
      )
      RETURNING *;
    `,{data:s,error:i}=await l.rpc("run_sql",{sql_query:n});if(i)throw console.error(`[apiService] Error inserting deal into ${r}:`,i),i;return console.log(`[apiService] Deal logged successfully to ${r}:`,s),{success:!0,deal:s&&s.length>0?s[0]:null,message:"Deal logged successfully"}}catch(o){return console.error("[apiService] Error in logFinanceManagerDeal:",o),{success:!1,message:`Failed to log deal: ${o.message||o}`,error:o}}},k=async(r,t)=>{try{console.log(`[apiService] Getting finance manager deals from schema: ${r}`);const o=await C();if(!o)throw new Error("Not authenticated");const e=(t==null?void 0:t.limit)||50,n=(t==null?void 0:t.offset)||0,s=(t==null?void 0:t.sortBy)||"created_at",i=(t==null?void 0:t.sortDirection)||"desc";let a="";if(t!=null&&t.filter){const d=[];Object.entries(t.filter).forEach(([f,c])=>{c!=null&&(typeof c=="string"?d.push(`${f} ILIKE '%${c}%'`):typeof c=="number"?d.push(`${f} = ${c}`):typeof c=="boolean"?d.push(`${f} = ${c}`):c.start&&c.end&&d.push(`${f} BETWEEN '${c.start}' AND '${c.end}'`))}),d.length>0&&(a=`AND ${d.join(" AND ")}`)}const u=`
      SELECT * FROM "${r}".deals 
      WHERE user_id = '${o.id}' ${a}
      ORDER BY ${s} ${i}
      LIMIT ${e} OFFSET ${n};
    `,h=`
      SELECT COUNT(*) FROM "${r}".deals 
      WHERE user_id = '${o.id}' ${a};
    `,{data:g,error:_}=await l.rpc("run_sql",{sql_query:u});if(_)throw console.error(`[apiService] Error selecting deals from ${r}:`,_),_;const{data:S,error:w}=await l.rpc("run_sql",{sql_query:h});if(w)throw console.error(`[apiService] Error counting deals in ${r}:`,w),w;const y=S&&S.length>0?parseInt(S[0].count):0;return console.log(`[apiService] Retrieved ${g?g.length:0} deals from ${r} (total: ${y})`),{success:!0,deals:g||[],count:y,message:`Retrieved ${g?g.length:0} deals successfully`}}catch(o){return console.error("[apiService] Error in getFinanceManagerDeals:",o),{success:!1,deals:[],count:0,message:`Failed to get deals: ${o.message||o}`,error:o}}};export{R as a,D as b,k as c,L as d,G as g,U as i,F as l,l as s};
//# sourceMappingURL=sales-oNOFhEgV.js.map
