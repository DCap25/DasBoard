import{c as O}from"./supabase-Cmt-ljYz.js";const F="https://iugjtokydvbcvmrpeziv.supabase.co",q="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1Z2p0b2t5ZHZiY3ZtcnBleml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTk3NjUsImV4cCI6MjA2MTI5NTc2NX0.XCNQoJbGQiXuyR_CFevro1Y8lqvh2_jmjrD181UYtY4",c=O(F,q),C=new Map;let U=new Set;const v=async()=>{try{const{data:{user:r},error:e}=await c.auth.getUser();if(e)return console.error("Error getting user:",e),null;if(!r)return null;if(C.has(r.id)){const s=C.get(r.id);return console.log("Using cached role for user:",{userId:r.id,role:s}),{...r,role:s}}const a=`role-${r.id}`;if(U.has(a))return console.warn("Avoiding duplicate role request for user:",r.id),{...r,role:null};U.add(a);try{const{data:s,error:t}=await c.from("profiles").select("role").eq("id",r.id).single();if(t){console.error("Error fetching user role:",t);const{data:i,error:o}=await c.from("users").select("role_id").eq("id",r.id).single();if(!o&&(i!=null&&i.role_id)){const{data:n}=await c.from("roles").select("name").eq("id",i.role_id).single();if(n!=null&&n.name)return C.set(r.id,n.name),{...r,role:n.name}}return C.set(r.id,"viewer"),{...r,role:"viewer"}}return C.set(r.id,s.role),{...r,role:s.role}}finally{U.delete(a)}}catch(r){return console.error("Error in getCurrentUser:",r),null}},L=r=>/(@exampletest\.com|@example\.com|test.*@)/.test(r.toLowerCase()),Q=async(r,e)=>{try{if(console.log(`[supabaseClient] Logging in test user: ${r}`),!L(r))return console.warn("[supabaseClient] This is not a test email, should use regular login"),{error:new Error("Not a test email")};const a=r.toLowerCase().includes("group")&&r.toLowerCase().includes("@exampletest.com");a&&(console.log(`[supabaseClient] ${r} - detected as a group admin by email pattern`),localStorage.setItem("force_redirect_after_login","/group-admin"),localStorage.setItem("force_redirect_timestamp",Date.now().toString()));const{data:s,error:t}=await c.auth.signInWithPassword({email:r,password:e,options:{persistSession:!0}});if(!t&&(s!=null&&s.user)){if(console.log(`[supabaseClient] Sign-in successful for ${r}, checking group admin status`),a){console.log(`[supabaseClient] Setting group admin metadata for ${r}`);try{const{data:i,error:o}=await c.auth.updateUser({data:{is_group_admin:!0,role:"dealer_group_admin"}});o?console.warn("[supabaseClient] Could not update user metadata:",o):console.log("[supabaseClient] Updated user metadata for group admin:",i);const{error:n}=await c.from("profiles").update({is_group_admin:!0,role:"dealer_group_admin"}).eq("id",s.user.id);n?console.warn("[supabaseClient] Could not update profile:",n):console.log("[supabaseClient] Updated profile for group admin")}catch(i){console.error("[supabaseClient] Error setting group admin status:",i)}return console.log("[supabaseClient] Performing immediate redirect for group admin test user"),sessionStorage.setItem("auth_redirect_authorized","true"),setTimeout(()=>{window.location.href="/test-login-redirect"},500),{data:{...s,user:{...s.user,user_metadata:{...s.user.user_metadata,is_group_admin:!0,role:"dealer_group_admin"}}},isGroupAdmin:!0,forceRedirect:!0,redirectPath:"/test-login-redirect",message:"Group admin test user logged in successfully"}}console.log(`[supabaseClient] Checking group admin status for ${r}`);try{const{data:i,error:o}=await c.from("profiles").select("is_group_admin, role, dealership_id").eq("id",s.user.id).maybeSingle();if(console.log("[supabaseClient] Test user profile data:",i),i!=null&&i.is_group_admin){console.log(`[supabaseClient] User ${r} is a group admin`);const{data:n,error:l}=await c.auth.updateUser({data:{is_group_admin:!0,role:i.role||"dealer_group_admin"}});return l?console.warn("[supabaseClient] Could not update user metadata:",l):console.log("[supabaseClient] Updated user metadata for group admin"),{data:s,isGroupAdmin:!0,message:"Group admin test user logged in successfully"}}}catch(i){console.error("[supabaseClient] Error checking group admin status:",i)}return{data:s,message:"Test user logged in successfully"}}return s!=null&&s.session?{data:s,message:"Test user logged in successfully"}:{error:t,message:"Failed to log in test user"}}catch(a){return console.error("[supabaseClient] Exception in loginTestUser:",a),{error:a instanceof Error?a:new Error("Unknown error during test login")}}},R={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,USE_MOCK_SUPABASE:void 0,VITE_API_URL:void 0,VITE_DEALERSHIP1_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRpanVsZXh4cmdmbWFpZXd0YXZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MjI4MTUsImV4cCI6MjA2MTI5ODgxNX0.8wHE8CliPJooMvp4qqg7HAqqZ7vSX8wSWacjgp4M9sA",VITE_DEALERSHIP1_SUPABASE_URL:"https://dijulexxrgfmaiewtavb.supabase.co",VITE_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1Z2p0b2t5ZHZiY3ZtcnBleml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTk3NjUsImV4cCI6MjA2MTI5NTc2NX0.XCNQoJbGQiXuyR_CFevro1Y8lqvh2_jmjrD181UYtY4",VITE_SUPABASE_URL:"https://iugjtokydvbcvmrpeziv.supabase.co"};async function H(){const{error:r}=await c.auth.signOut();if(r)throw console.error("Sign out error:",r),r}const K=async()=>{try{console.log("[apiService] Fetching dealership groups");const{data:r,error:e}=await c.from("dealership_groups").select("*").order("name");if(e)throw console.error("[apiService] Error fetching dealership groups:",e),e;return r&&r.length>0&&console.log("[apiService] First group structure:",r[0]),console.log(`[apiService] Fetched ${(r==null?void 0:r.length)||0} dealership groups`),r}catch(r){throw console.error("[apiService] Exception in getDealershipGroups:",r),r}},W=async r=>{try{console.log("[apiService] Creating dealership group:",r);const e={...r};e.brands&&(Array.isArray(e.brands)?(console.log("[apiService] Brands provided as array, converting to string"),e.brands=e.brands.join(",")):typeof e.brands=="string"&&console.log("[apiService] Brands provided as string:",e.brands));const{data:a,error:s}=await c.from("dealership_groups").insert(e).select().single();if(s)throw console.error("[apiService] Error creating dealership group:",s),console.error("[apiService] Error details:",{message:s.message,code:s.code,details:s.details,hint:s.hint}),console.error("[apiService] Full error JSON:",JSON.stringify(s,null,2)),s;return console.log("[apiService] Created dealership group successfully:",a),a}catch(e){console.error("[apiService] Exception in createDealershipGroup:",e),e instanceof Error&&(console.error("[apiService] Error message:",e.message),console.error("[apiService] Error stack:",e.stack));try{console.error("[apiService] Full error object:",JSON.stringify(e,Object.getOwnPropertyNames(e)))}catch{console.error("[apiService] Could not stringify error object")}throw e}},ee=async r=>{try{console.log("[apiService] Fetching dealerships",r?`for group ${r}`:"");let e=c.from("dealerships").select("*, dealership_groups(name)").order("name");const{data:a,error:s}=await e;if(s)throw console.error("[apiService] Error fetching dealerships:",s),s;return console.log("[apiService] Fetched dealerships:",a),a}catch(e){throw console.error("[apiService] Exception in getDealerships:",e),e}},re=async r=>{try{console.log("[apiService] Creating dealership, data:",r),r.schema_name||(r.schema_name=`dealership_${Date.now()}`),r.group_id?console.log(`[apiService] Assigning dealership to group: ${r.group_id}`):(console.log("[apiService] No group assigned for this dealership"),r.group_id=null),r.brands&&typeof r.brands=="string"?console.log("[apiService] Brands provided as string:",r.brands):Array.isArray(r.brands)&&(console.log("[apiService] Brands provided as array, converting to JSON"),r.brands=JSON.stringify(r.brands)),console.log("[apiService] Final dealership data for DB:",JSON.stringify(r,null,2));const{data:e,error:a}=await c.from("dealerships").insert(r).select().single();if(a)throw console.error("[apiService] Error creating dealership:",a),console.error("[apiService] Error details:",{message:a.message,code:a.code,details:a.details,hint:a.hint}),a;return console.log("[apiService] Created dealership successfully:",e),e}catch(e){throw console.error("[apiService] Exception in createDealership:",e),e instanceof Error&&(console.error("[apiService] Error message:",e.message),console.error("[apiService] Error stack:",e.stack)),e}},se=async(r,e,a)=>{try{console.log(`[apiService] Updating user ${r} with role ${e} and dealership ${a||"none"}`);const s={role_id:e},{data:t,error:i}=await c.from("profiles").update(s).eq("id",r).select().single();if(i)throw console.error("[apiService] Error updating user role:",i),i;return console.log("[apiService] Updated user role:",t),t}catch(s){throw console.error("[apiService] Exception in updateUserRole:",s),s}},T=async(r,e)=>{try{console.log(`[apiService] Logging schema operation: ${r}`,e);try{const{data:a,error:s}=await c.from("logs").insert({action:r,details:e}).select().single();return s?(console.log("[apiService] Error logging schema operation, continuing silently:",s.message),!0):(console.log("[apiService] Logged schema operation:",a),!0)}catch{return console.log("[apiService] Schema operation logging failed, continuing silently"),!0}}catch{return console.log("[apiService] Exception in logSchemaOperation, continuing silently"),!0}},M=async r=>{try{console.log("Fetching Supabase config for dealership:",r);const{data:e,error:a}=await c.from("dealerships").select("id, name, schema_name, supabase_url, supabase_key").eq("id",r).single();if(a)throw console.error("Error fetching dealership Supabase config:",a),a;if(!e)throw new Error(`No dealership found with ID ${r}`);if(!e.supabase_url||!e.supabase_key){const s=e.schema_name||`dealership_${r}`,t=`VITE_${s.toUpperCase()}_SUPABASE_URL`,i=`VITE_${s.toUpperCase()}_SUPABASE_ANON_KEY`,o=R[t]||"",n=R[i]||"";return!o||!n?(console.warn(`No Supabase config found for dealership ${r} in either database or environment`),null):{id:e.id,name:e.name,schema_name:s,supabase_url:o,supabase_key:n}}return e}catch(e){return console.error("Failed to get dealership Supabase config:",e),null}},N=async r=>{try{const e=await M(r);if(!e||!e.supabase_url||!e.supabase_key)return{success:!1,message:"Missing Supabase configuration for this dealership"};const a=createClient(e.supabase_url,e.supabase_key),{data:s,error:t}=await a.rpc("get_pg_version");return t?(console.error("Error testing dealership connection:",t),{success:!1,message:`Connection failed: ${t.message}`,error:t}):{success:!0,message:"Connection successful",data:s,config:e}}catch(e){return console.error("Failed to test dealership connection:",e),{success:!1,message:`Connection test failed: ${e}`,error:e}}},ae=async(r,e)=>{try{console.log(`Creating user in dealership ${r}:`,{email:o.email,name:`${o.first_name} ${o.last_name}`,role:o.role_id});const a=await N(r);if(!a.success)throw new Error(`Cannot connect to dealership Supabase: ${a.message}`);const s=getDealershipSupabase(r),{data:t,error:i}=await s.auth.admin.createUser({email:o.email,password:o.password,email_confirm:!0,user_metadata:{first_name:o.first_name,last_name:o.last_name,full_name:`${o.first_name} ${o.last_name}`,role_id:o.role_id,dealership_id:r}});if(i)throw console.error("Error creating user in auth system:",i),i;if(!t.user)throw new Error("User creation failed - no user returned");const{data:o,error:n}=await s.from("users").insert({id:t.user.id,first_name:o.first_name,last_name:o.last_name,email:o.email,role_id:o.role_id,dealership_id:r,phone_number:o.phone_number}).select().single();if(n){console.error("Error adding user to public.users table:",n);try{await s.auth.admin.deleteUser(t.user.id)}catch(l){console.error("Error cleaning up auth user after failure:",l)}throw n}return await T("create_dealership_user",{dealership_id:r,user_id:t.user.id,email:o.email,role_id:o.role_id}),{success:!0,user:{...t.user,...o}}}catch(a){return console.error(`Failed to create user in dealership ${r}:`,a),{success:!1,error:a}}},ie=async r=>{try{const e=await N(r);if(!e.success)throw new Error(`Cannot connect to dealership Supabase: ${e.message}`);const a=getDealershipSupabase(r),{data:s,error:t}=await a.from("users").select(`
        id, 
        first_name, 
        last_name, 
        email, 
        role_id,
        phone_number,
        roles(name)
      `).order("last_name",{ascending:!0});if(t)throw console.error(`Error fetching users from dealership ${r}:`,t),t;return s||[]}catch(e){throw console.error(`Failed to get users from dealership ${r}:`,e),e}},A=async r=>{try{console.log(`[apiService] Creating schema: ${r}`);const{error:e}=await c.rpc("create_dealership_schema",{schema_name:r});if(e)throw console.error("[apiService] Error creating schema:",e),e;return console.log(`[apiService] Schema ${r} created successfully`),{success:!0,message:`Schema ${r} created successfully`}}catch(e){throw console.error("[apiService] Exception in createDealershipSchema:",e),e}},oe=async r=>{try{console.log("[apiService] Deleting dealership group:",r);const{data:e,error:a}=await c.from("dealerships").select("id").eq("group_id",r);if(a)throw console.error("[apiService] Error checking related dealerships:",a),a;if(e&&e.length>0)throw new Error(`Cannot delete group: ${e.length} dealership(s) are associated with this group`);const{error:s}=await c.from("dealership_groups").delete().eq("id",r);if(s)throw console.error("[apiService] Error deleting dealership group:",s),s;return console.log("[apiService] Successfully deleted dealership group:",r),{success:!0}}catch(e){throw console.error("[apiService] Exception in deleteDealershipGroup:",e),e}},ne=async r=>{try{console.log("[apiService] Deleting dealership:",r);const{data:e,error:a}=await c.from("dealerships").select("schema_name").eq("id",r).single();if(a)throw console.error("[apiService] Error getting dealership before delete:",a),a;if(!e)throw new Error("Dealership not found");const{error:s}=await c.from("dealerships").delete().eq("id",r);if(s)throw console.error("[apiService] Error deleting dealership:",s),s;return console.log("[apiService] Successfully deleted dealership:",r),{success:!0,schemaName:e.schema_name}}catch(e){throw console.error("[apiService] Exception in deleteDealership:",e),e}},te=async()=>{try{console.log("[apiService] Fetching signup requests");const{data:r,error:e}=await c.from("signup_requests").select("*").order("created_at",{ascending:!1});if(e)throw console.error("[apiService] Error fetching signup requests:",e),e;return console.log(`[apiService] Retrieved ${(r==null?void 0:r.length)||0} signup requests`),r||[]}catch(r){throw console.error("[apiService] Error in getSignupRequests:",r),r}},ce=async(r,e)=>{var a,s,t;try{console.log(`[apiService] Approving signup request: ${r}`);const i=await v();if(!i)throw new Error("Not authenticated");const{data:o,error:n}=await c.from("signup_requests").select("*").eq("id",r).single();if(n)throw console.error(`[apiService] Error fetching signup request: ${n.message}`),n;const l=o;console.log("[apiService] Found signup request:",l);const{error:g}=await c.from("signup_requests").update({status:"approved",approved_at:new Date().toISOString()}).eq("id",r);if(g)throw console.error(`[apiService] Error updating signup request: ${g.message}`),g;if(e.isDealerGroup)return await Y(l,e);if(l.tier==="finance_manager_only")return await Z(l,e);{console.log(`[apiService] Handling dealership signup for ${l.dealership_name}`);let u=e.schemaName;if(e.createSchema&&u){console.log(`[apiService] Creating schema: ${u}`);const{success:f,error:m}=await A(u);if(!f)throw console.error(`[apiService] Error creating schema: ${m}`),m}const{data:p,error:E}=await c.from("dealerships").insert({name:l.dealership_name,schema_name:u,tier:l.tier,add_ons:l.add_ons||[],status:"active",contact_email:l.email,contact_name:l.contact_person,contact_phone:l.phone,subscription_status:"active",created_by:i.id}).select().single();if(E)throw console.error(`[apiService] Error creating dealership: ${E.message}`),E;const _=p.id;if(console.log(`[apiService] Created dealership with ID: ${_}`),e.adminEmail){console.log(`[apiService] Creating admin user: ${e.adminEmail}`);const{data:f,error:m}=await c.from("profiles").select("id").eq("email",e.adminEmail).single();if(m&&m.code!=="PGRST116")throw console.error(`[apiService] Error checking for existing user: ${m.message}`),m;if(f){console.log(`[apiService] User already exists: ${e.adminEmail}`);const{error:h}=await c.from("profiles").update({dealership_id:_,role:"dealership_admin"}).eq("email",e.adminEmail);if(h)throw console.error(`[apiService] Error updating user: ${h.message}`),h}else{const{error:h,data:d}=await c.auth.signUp({email:e.adminEmail,password:e.tempPassword||D()});if(h)throw console.error(`[apiService] Error creating user: ${h.message}`),h;const{error:w}=await c.from("profiles").insert({id:(a=d==null?void 0:d.user)==null?void 0:a.id,email:e.adminEmail,dealership_id:_,role:"dealership_admin",first_name:((s=e.adminName)==null?void 0:s.split(" ")[0])||"",last_name:((t=e.adminName)==null?void 0:t.split(" ").slice(1).join(" "))||""});if(w)throw console.error(`[apiService] Error creating profile: ${w.message}`),w}}return await I({dealership_id:_,event_type:"signup",tier:l.tier,add_ons:l.add_ons||[],user_id:i.id}),console.log(`[apiService] Dealership signup approved and setup complete for ${l.dealership_name}`),{success:!0,message:`Dealership ${l.dealership_name} created successfully`,dealershipIds:[_]}}}catch(i){return console.error("[apiService] Error in approveSignupRequest:",i),{success:!1,message:i instanceof Error?i.message:"An unknown error occurred",error:i}}},le=async(r,e)=>{try{console.log(`[apiService] Rejecting signup request: ${r}`);const a=await v();if(!a)throw new Error("Not authenticated");const{error:s}=await c.from("signup_requests").update({status:"rejected",processed_at:new Date().toISOString(),processed_by:a.id,metadata:{rejection_reason:e||"No reason provided"}}).eq("id",r);if(s)throw console.error("[apiService] Error updating signup request status:",s),s;return{success:!0,message:"Signup request rejected successfully"}}catch(a){return console.error("[apiService] Error in rejectSignupRequest:",a),{success:!1,message:"Failed to reject signup request",error:a}}},P=async(r,e,a)=>{console.log("[apiService] Getting deals for user:",r,"from:",e,"to:",a);try{const{data:s,error:t}=await c.from("deals").select("*").eq("salesperson_id",r).gte("sale_date",e).lte("sale_date",a);if(t)throw console.error("[apiService] Error fetching deals:",t),t;return console.log(`[apiService] Found ${(s==null?void 0:s.length)||0} deals`),s||[]}catch(s){throw console.error("[apiService] Unexpected error fetching deals:",s),s}},k=async(r,e,a)=>{console.log("[apiService] Getting days off for user:",r);try{const{data:s,error:t}=await c.from("schedule").select("*").eq("user_id",r).gte("date",e).lte("date",a).eq("is_day_off",!0);if(t)return console.error("[apiService] Error fetching schedule:",t),[5,8,15,18,25,27,29];const i=(s==null?void 0:s.map(o=>new Date(o.date).getDate()))||[];return console.log("[apiService] Days off this month:",i),i.length===0?(console.log("[apiService] No days off found, using default pattern"),[5,8,15,18,25,27,29]):i}catch(s){return console.error("[apiService] Unexpected error fetching schedule:",s),[5,8,15,18,25,27,29]}},G=(r,e)=>{let a=0;for(let s=1;s<=Math.min(10,r);s++)!e.includes(s)&&s%3===0&&a++;if(r>10)for(let s=11;s<=Math.min(20,r);s++)!e.includes(s)&&s%2===0&&a++;if(r>20)for(let s=21;s<=r;s++)e.includes(s)||a++;return console.log(`[apiService] Expected sales by day ${r}:`,a),a},x=(r,e,a,s=15)=>{const t=G(e,a),i=r.length,o=i/(t||1);let n="neutral";o>=1?n="on-track":o>=.8?n="slightly-behind":n="behind";const l=Math.min(100,Math.round(i/s*100));return console.log("[apiService] Goal progress calculation:",{currentDay:e,expectedSales:t,actualSales:i,progressRatio:o,status:n,progressPercentage:l}),{expected:t,actual:i,progress:l,status:n,progressRatio:o}},ue=async r=>{const e=new Date,a=e.getFullYear(),s=e.getMonth(),t=e.getDate(),i=new Date(a,s,1).toISOString().split("T")[0],o=new Date(a,s+1,0).toISOString().split("T")[0];try{const[n,l]=await Promise.all([P(r,i,o),k(r,i,o)]),g=x(n,t,l);return{deals:n,daysOff:l,progressMetrics:g,daysInMonth:new Date(a,s+1,0).getDate(),currentDay:t}}catch(n){throw console.error("[apiService] Error in getGoalTrackingData:",n),n}},J=async(r,e)=>{var a,s;try{console.log(`[apiService] Setting up RLS policies for group ${r} with ${e.length} dealerships`);const{data:t,error:i}=await c.from("roles").select("id, name").in("name",["group_admin","area_vp","dealership_admin"]);if(i)throw console.error("[apiService] Error fetching roles:",i),i;const o=(a=t.find(u=>u.name==="group_admin"))==null?void 0:a.id,n=(s=t.find(u=>u.name==="area_vp"))==null?void 0:s.id;if(!o||!n)throw console.error("[apiService] Missing required role IDs"),new Error("Required role IDs not found");console.log("[apiService] Found role IDs - Group Admin:",o,"Area VP:",n);const l=e.map(u=>({group_id:r,dealership_id:u,created_at:new Date().toISOString()})),{error:g}=await c.from("group_dealership_mappings").upsert(l);if(g)throw console.error("[apiService] Error creating group dealership mappings:",g),g;console.log(`[apiService] Created ${l.length} group dealership mappings`);for(const u of e)await T("setup_group_rls",{group_id:r,dealership_id:u,roles:{group_admin:o,area_vp:n}});return console.log("[apiService] Group RLS policies setup complete"),{success:!0,message:`RLS policies configured for group ${r}`}}catch(t){return console.error("[apiService] Error setting up group RLS policies:",t),{success:!1,message:"Failed to set up group RLS policies",error:t}}},j=async r=>{try{console.log(`[apiService] Creating finance manager schema: ${r}`);const e=await v(),{error:a}=await c.rpc("create_schema",{schema_name:r});if(a)throw console.error(`[apiService] Error creating schema ${r}:`,a),a;console.log(`[apiService] Schema ${r} created successfully. Creating tables...`);const s=`
      CREATE TABLE IF NOT EXISTS "${r}".deals (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES auth.users(id),
        deal_number TEXT,
        stock_number TEXT,
        vin TEXT,
        customer_name TEXT,
        vehicle TEXT,
        sale_date DATE NOT NULL DEFAULT CURRENT_DATE,
        amount NUMERIC(10,2),
        products JSONB DEFAULT '[]',
        profit NUMERIC(10,2) DEFAULT 0,
        status TEXT DEFAULT 'pending',
        deal_details JSONB,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
      );
    `,{error:t}=await c.rpc("run_sql",{sql_query:s});if(t)throw console.error(`[apiService] Error creating deals table in ${r}:`,t),t;const i=`
      -- Enable RLS on the deals table
      ALTER TABLE "${r}".deals ENABLE ROW LEVEL SECURITY;
      
      -- Create policy for users to select their own deals
      CREATE POLICY "Users can view their own deals" 
      ON "${r}".deals FOR SELECT 
      USING (auth.uid() = user_id);
      
      -- Create policy for users to insert their own deals
      CREATE POLICY "Users can insert their own deals" 
      ON "${r}".deals FOR INSERT 
      WITH CHECK (auth.uid() = user_id);
      
      -- Create policy for users to update their own deals
      CREATE POLICY "Users can update their own deals" 
      ON "${r}".deals FOR UPDATE
      USING (auth.uid() = user_id);
    `,{error:o}=await c.rpc("run_sql",{sql_query:i});if(o)throw console.error(`[apiService] Error setting RLS policies in ${r}:`,o),o;return await T("create_finance_manager_schema",{schemaName:r,createdBy:e==null?void 0:e.id,timestamp:new Date().toISOString()}),console.log(`[apiService] Finance manager schema ${r} setup completed successfully`),{success:!0,message:`Finance manager schema ${r} created successfully`}}catch(e){return console.error("[apiService] Error in createFinanceManagerSchema:",e),{success:!1,message:`Failed to create finance manager schema: ${e.message||e}`,error:e}}},de=async(r,e)=>{try{console.log(`[apiService] Logging finance manager deal to schema: ${r}`);const a=await v();if(!a)throw new Error("Not authenticated");const s={user_id:a.id,deal_number:e.deal_number||`D${Math.floor(1e3+Math.random()*9e3)}`,stock_number:e.stock_number||"",vin:e.vin||"",customer_name:e.customer_name,vehicle:e.vehicle,sale_date:e.sale_date||new Date().toISOString().split("T")[0],amount:e.amount||0,products:e.products?JSON.stringify(e.products):"[]",profit:e.profit||0,status:e.status||"pending",deal_details:e.deal_details?JSON.stringify(e.deal_details):"{}",created_at:new Date().toISOString(),updated_at:new Date().toISOString()},t=`
      INSERT INTO "${r}".deals (
        user_id, deal_number, stock_number, vin, customer_name, 
        vehicle, sale_date, amount, products, profit, 
        status, deal_details, created_at, updated_at
      ) 
      VALUES (
        '${s.user_id}', 
        '${s.deal_number}', 
        '${s.stock_number}', 
        '${s.vin}', 
        '${s.customer_name}', 
        '${s.vehicle}', 
        '${s.sale_date}', 
        ${s.amount}, 
        '${s.products}', 
        ${s.profit}, 
        '${s.status}', 
        '${s.deal_details}',
        '${s.created_at}',
        '${s.updated_at}'
      )
      RETURNING *;
    `,{data:i,error:o}=await c.rpc("run_sql",{sql_query:t});if(o)throw console.error(`[apiService] Error inserting deal into ${r}:`,o),o;return console.log(`[apiService] Deal logged successfully to ${r}:`,i),{success:!0,deal:i&&i.length>0?i[0]:null,message:"Deal logged successfully"}}catch(a){return console.error("[apiService] Error in logFinanceManagerDeal:",a),{success:!1,message:`Failed to log deal: ${a.message||a}`,error:a}}},pe=async(r,e)=>{try{console.log(`[apiService] Getting finance manager deals from schema: ${r}`);const a=await v();if(!a)throw new Error("Not authenticated");const s=(e==null?void 0:e.limit)||50,t=(e==null?void 0:e.offset)||0,i=(e==null?void 0:e.sortBy)||"created_at",o=(e==null?void 0:e.sortDirection)||"desc";let n="";if(e!=null&&e.filter){const m=[];Object.entries(e.filter).forEach(([h,d])=>{d!=null&&(typeof d=="string"?m.push(`${h} ILIKE '%${d}%'`):typeof d=="number"?m.push(`${h} = ${d}`):typeof d=="boolean"?m.push(`${h} = ${d}`):d.start&&d.end&&m.push(`${h} BETWEEN '${d.start}' AND '${d.end}'`))}),m.length>0&&(n=`AND ${m.join(" AND ")}`)}const l=`
      SELECT * FROM "${r}".deals 
      WHERE user_id = '${a.id}' ${n}
      ORDER BY ${i} ${o}
      LIMIT ${s} OFFSET ${t};
    `,g=`
      SELECT COUNT(*) FROM "${r}".deals 
      WHERE user_id = '${a.id}' ${n};
    `,{data:u,error:p}=await c.rpc("run_sql",{sql_query:l});if(p)throw console.error(`[apiService] Error selecting deals from ${r}:`,p),p;const{data:E,error:_}=await c.rpc("run_sql",{sql_query:g});if(_)throw console.error(`[apiService] Error counting deals in ${r}:`,_),_;const f=E&&E.length>0?parseInt(E[0].count):0;return console.log(`[apiService] Retrieved ${u?u.length:0} deals from ${r} (total: ${f})`),{success:!0,deals:u||[],count:f,message:`Retrieved ${u?u.length:0} deals successfully`}}catch(a){return console.error("[apiService] Error in getFinanceManagerDeals:",a),{success:!1,deals:[],count:0,message:`Failed to get deals: ${a.message||a}`,error:a}}},B=async r=>{try{console.log(`[apiService] Getting user limits for dealership: ${r}`);const{data:e,error:a}=await c.from("dealerships").select("*").eq("id",r).single();if(a)throw console.error(`[apiService] Error getting dealership info: ${a.message}`),a;let s={sales_people:10,finance_managers:3,sales_managers:3,general_managers:1,finance_assistants:2,others:2};const t=e.add_ons||[];return t.includes("plus")&&(s={sales_people:15,finance_managers:5,sales_managers:5,general_managers:2,finance_assistants:3,others:3}),t.includes("plusplus")&&(s={sales_people:25,finance_managers:8,sales_managers:8,general_managers:3,finance_assistants:5,others:5}),{success:!0,limits:s,tier:e.tier,add_ons:t}}catch(e){return console.error(`[apiService] Error getting user limits: ${e}`),{success:!1,error:e}}},ge=async(r,e)=>{try{console.log(`[apiService] Checking if dealership ${r} can add user with role ${e}`);const{success:a,limits:s,error:t}=await B(r);if(!a||!s)throw t||new Error("Failed to get user limits");const{data:i,error:o}=await c.from("profiles").select("role").eq("dealership_id",r);if(o)throw console.error(`[apiService] Error counting users: ${o.message}`),o;let n;e.includes("sales")&&!e.includes("manager")?n="sales_people":e.includes("finance")&&!e.includes("manager")&&!e.includes("director")?n="finance_assistants":e.includes("finance")&&(e.includes("manager")||e.includes("director"))?n="finance_managers":e.includes("sales")&&e.includes("manager")?n="sales_managers":e.includes("general")&&e.includes("manager")?n="general_managers":n="others";const l=i.filter(p=>n==="sales_people"?p.role.includes("sales")&&!p.role.includes("manager"):n==="finance_assistants"?p.role.includes("finance")&&!p.role.includes("manager")&&!p.role.includes("director"):n==="finance_managers"?p.role.includes("finance")&&(p.role.includes("manager")||p.role.includes("director")):n==="sales_managers"?p.role.includes("sales")&&p.role.includes("manager"):n==="general_managers"?p.role.includes("general")&&p.role.includes("manager"):!["sales_people","finance_managers","sales_managers","general_managers","finance_assistants"].includes(X(p.role))).length,g=s[n];return{success:!0,canAdd:l<g,currentCount:l,limit:g}}catch(a){return console.error(`[apiService] Error checking if can add user: ${a}`),{success:!1,canAdd:!1,error:a}}};function X(r){return r.includes("sales")&&!r.includes("manager")?"sales_people":r.includes("finance")&&!r.includes("manager")&&!r.includes("director")?"finance_assistants":r.includes("finance")&&(r.includes("manager")||r.includes("director"))?"finance_managers":r.includes("sales")&&r.includes("manager")?"sales_managers":r.includes("general")&&r.includes("manager")?"general_managers":"others"}function D(){const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";let e="";for(let a=0;a<12;a++)e+=r.charAt(Math.floor(Math.random()*r.length));return e}async function Y(r,e){var a,s,t;try{console.log(`[apiService] Processing dealer group signup for ${r.dealership_name}`);const i=await v();if(!i)throw new Error("Not authenticated");const o=e.groupLevel||r.group_level||"level_1",n=e.dealershipCount||r.dealership_count||2,l=e.addOns||r.add_ons||[];console.log(`[apiService] Group level: ${o}, Dealership count: ${n}, Add-ons: ${JSON.stringify(l)}`);const g=e.schemaName||`group_${Date.now().toString(36)}_${Math.random().toString(36).substring(2,7)}`,u={sales_people:10,finance_managers:3,sales_managers:3,general_managers:1,finance_assistants:2,others:2,area_vps:0};l.includes("plus")&&(u.sales_people=15,u.finance_managers=5,u.sales_managers=5,u.general_managers=2,u.finance_assistants=3,u.others=3,u.area_vps=o==="level_1"?1:2),l.includes("plusplus")&&(u.sales_people=25,u.finance_managers=8,u.sales_managers=8,u.general_managers=3,u.finance_assistants=5,u.others=5,u.area_vps=999);const p=o==="level_1"?200:o==="level_2"?250:300,{data:E,error:_}=await c.from("dealership_groups").insert({name:r.dealership_name,settings:{level:o,dealership_count:n,add_ons:l,user_limits:u,pricing_per_dealership:p,stripe_subscription_id:r.stripe_session_id},status:"active",created_by:i.id}).select().single();if(_)throw console.error(`[apiService] Error creating dealership group: ${_.message}`),_;const f=E.id;console.log(`[apiService] Created dealer group: ${E.name}, ID: ${f}`);const m=[];for(let d=0;d<n;d++){const w=`${g}_${d+1}`,y=`${r.dealership_name} - Location ${d+1}`;if(e.createSchema){console.log(`[apiService] Creating schema for dealership ${d+1}: ${w}`);const b=await A(w);b.success||console.error(`[apiService] Error creating schema for dealership ${d+1}:`,b.error)}const{data:S,error:$}=await c.from("dealerships").insert({name:y,group_id:f,schema_name:w,tier:"dealership",add_ons:l,status:"active",contact_email:r.email,contact_name:r.contact_person,contact_phone:r.phone,subscription_status:"active",created_by:i.id,settings:{user_limits:u,group_level:o,dealership_index:d+1}}).select().single();if($){console.error(`[apiService] Error creating dealership ${d+1}:`,$);continue}m.push(S.id),console.log(`[apiService] Created dealership: ${S.name}, ID: ${S.id}`)}if(e.adminEmail){console.log(`[apiService] Creating group admin user: ${e.adminEmail}`);const d=m[0],{data:w,error:y}=await c.from("profiles").select("id").eq("email",e.adminEmail).single();if(y&&y.code!=="PGRST116")throw console.error(`[apiService] Error checking for existing user: ${y.message}`),y;if(w){console.log(`[apiService] User already exists: ${e.adminEmail}`);const{error:S}=await c.from("profiles").update({dealership_id:d,group_id:f,role:"dealer_group_admin",is_group_admin:!0}).eq("email",e.adminEmail);if(S)throw console.error(`[apiService] Error updating user: ${S.message}`),S}else{const{error:S,data:$}=await c.auth.signUp({email:e.adminEmail,password:e.tempPassword||D()});if(S)throw console.error(`[apiService] Error creating user: ${S.message}`),S;const{error:b}=await c.from("profiles").insert({id:(a=$==null?void 0:$.user)==null?void 0:a.id,email:e.adminEmail,dealership_id:d,group_id:f,role:"dealer_group_admin",is_group_admin:!0,first_name:((s=e.adminName)==null?void 0:s.split(" ")[0])||"",last_name:((t=e.adminName)==null?void 0:t.split(" ").slice(1).join(" "))||""});if(b)throw console.error(`[apiService] Error creating profile: ${b.message}`),b}}await J(f,m);const h=p*n+(l.includes("plus")?100:0)+(l.includes("plusplus")?500:0);return await I({group_id:f,dealership_id:m[0],event_type:"signup",tier:"dealer_group",add_ons:l,amount:h,user_id:i.id}),console.log(`[apiService] Group signup completed successfully. Created ${m.length} dealerships.`),{success:!0,message:`Dealer Group created with ${m.length} dealerships`,groupId:f,dealershipIds:m}}catch(i){return console.error("[apiService] Error in handleDealerGroupSignup:",i),{success:!1,message:i instanceof Error?i.message:"An unknown error occurred",error:i}}}async function Z(r,e){var a,s,t;try{console.log(`[apiService] Processing finance manager signup for ${r.contact_person}`),console.log("[apiService] Promotional pricing applied: Free (normally $5/month)");const i=await v();if(!i)throw new Error("Not authenticated");const o=e.schemaName||`finance_mgr_${Date.now().toString(36)}_${Math.random().toString(36).substring(2,7)}`;if(e.createSchema!==!1){console.log(`[apiService] Creating schema for finance manager: ${o}`);const n=await j(o);if(!n.success)throw console.error("[apiService] Error creating finance manager schema:",n.error),new Error(`Failed to create schema: ${n.message}`)}if(e.adminEmail){console.log(`[apiService] Creating finance manager user: ${e.adminEmail}`);const{data:n,error:l}=await c.from("profiles").select("id").eq("email",e.adminEmail).single();if(l&&l.code!=="PGRST116")throw console.error(`[apiService] Error checking for existing user: ${l.message}`),l;if(n){console.log(`[apiService] User already exists: ${e.adminEmail}`);const{error:g}=await c.from("profiles").update({role:"finance_manager",schema_name:o}).eq("email",e.adminEmail);if(g)throw console.error(`[apiService] Error updating user: ${g.message}`),g}else{const{error:g,data:u}=await c.auth.signUp({email:e.adminEmail,password:e.tempPassword||D(),options:{data:{role:"finance_manager",schema_name:o}}});if(g)throw console.error(`[apiService] Error creating user: ${g.message}`),g;const{error:p}=await c.from("profiles").insert({id:(a=u==null?void 0:u.user)==null?void 0:a.id,email:e.adminEmail,role:"finance_manager",schema_name:o,first_name:((s=e.adminName)==null?void 0:s.split(" ")[0])||"",last_name:((t=e.adminName)==null?void 0:t.split(" ").slice(1).join(" "))||"",settings:{subscription_tier:"finance_manager_only",trial_ends_at:new Date(Date.now()+30*24*60*60*1e3).toISOString(),promo_applied:!0,promo_details:"Free instead of $5/month for a limited time"}});if(p)throw console.error(`[apiService] Error creating profile: ${p.message}`),p}}await I({schema_name:o,event_type:"signup",tier:"finance_manager_only",amount:0,is_promo:!0,original_amount:5,user_id:i.id});try{const{error:n}=await c.from("promotions_usage").insert({promotion_tier:"finance_manager_only",user_id:e.adminEmail?await V(e.adminEmail):null,schema_name:o,signup_date:new Date().toISOString()});n&&console.log("[apiService] Note: Could not record promotion usage:",n.message)}catch(n){console.log("[apiService] Note: Error in promotion tracking:",n)}return console.log(`[apiService] Finance manager signup completed successfully for schema: ${o} with promotional pricing`),{success:!0,message:"Finance Manager account created successfully with promotional pricing (Free)"}}catch(i){return console.error("[apiService] Error in handleFinanceManagerSignup:",i),{success:!1,message:i instanceof Error?i.message:"An unknown error occurred",error:i}}}const I=async r=>{try{console.log(`[apiService] Recording subscription event: ${r.event_type} for tier: ${r.tier}`),r.is_promo&&console.log(`[apiService] Promotional pricing applied: ${r.amount} (original: ${r.original_amount})`);const{error:e}=await c.from("subscription_events").insert({dealership_id:r.dealership_id,group_id:r.group_id,schema_name:r.schema_name,event_type:r.event_type,tier:r.tier,add_ons:r.add_ons||[],amount:r.amount||null,is_promotional:r.is_promo||!1,original_amount:r.original_amount,user_id:r.user_id,created_at:new Date().toISOString()});if(e)throw console.error("[apiService] Error recording subscription event:",e),e;return{success:!0,message:"Subscription event recorded successfully"}}catch(e){return console.error("[apiService] Error recording subscription event:",e),{success:!1,message:"Failed to record subscription event",error:e}}};async function V(r){try{const{data:e,error:a}=await c.from("profiles").select("id").eq("email",r).single();return a?(console.error("[apiService] Error getting user ID by email:",a),null):(e==null?void 0:e.id)||null}catch(e){return console.error("[apiService] Exception in getUserIdByEmail:",e),null}}export{Q as a,ee as b,te as c,ne as d,oe as e,ce as f,K as g,W as h,L as i,re as j,A as k,T as l,ue as m,B as n,ge as o,ie as p,ae as q,le as r,c as s,H as t,se as u,pe as v,de as w};
//# sourceMappingURL=sales-l66_TeIE.js.map
