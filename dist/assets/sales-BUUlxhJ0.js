import{c as v}from"./supabase-Cmt-ljYz.js";const b="https://iugjtokydvbcvmrpeziv.supabase.co",$="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1Z2p0b2t5ZHZiY3ZtcnBleml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTk3NjUsImV4cCI6MjA2MTI5NTc2NX0.XCNQoJbGQiXuyR_CFevro1Y8lqvh2_jmjrD181UYtY4";let h=null;const T=()=>h||(console.log("Initializing Supabase client:",{url:b,keyLength:$.length,timestamp:new Date().toISOString()}),h=v(b,$,{auth:{persistSession:!0,autoRefreshToken:!0,detectSessionInUrl:!0,storage:window.localStorage},global:{headers:{"X-Client-Info":"dasboard-app"}}}),h),c=T(),m=new Map;let w=new Set;const I=async()=>{try{const{data:{user:e},error:r}=await c.auth.getUser();if(r)return console.error("Error getting user:",r),null;if(!e)return null;if(m.has(e.id)){const s=m.get(e.id);return console.log("Using cached role for user:",{userId:e.id,role:s}),{...e,role:s}}const t=`role-${e.id}`;if(w.has(t))return console.warn("Avoiding duplicate role request for user:",e.id),{...e,role:null};w.add(t);try{const{data:s,error:n}=await c.from("profiles").select("role").eq("id",e.id).single();if(n){console.error("Error fetching user role:",n);const{data:i,error:a}=await c.from("users").select("role_id").eq("id",e.id).single();if(!a&&(i!=null&&i.role_id)){const{data:o}=await c.from("roles").select("name").eq("id",i.role_id).single();if(o!=null&&o.name)return m.set(e.id,o.name),{...e,role:o.name}}return m.set(e.id,"viewer"),{...e,role:"viewer"}}return m.set(e.id,s.role),{...e,role:s.role}}finally{w.delete(t)}}catch(e){return console.error("Error in getCurrentUser:",e),null}},N=e=>/(@exampletest\.com|@example\.com|test.*@)/.test(e.toLowerCase()),L=async(e,r)=>{try{if(console.log(`[supabaseClient] Logging in test user: ${e}`),!N(e))return console.warn("[supabaseClient] This is not a test email, should use regular login"),{error:new Error("Not a test email")};const t=e.toLowerCase().includes("group")&&e.toLowerCase().includes("@exampletest.com");t&&(console.log(`[supabaseClient] ${e} - detected as a group admin by email pattern`),localStorage.setItem("force_redirect_after_login","/group-admin"),localStorage.setItem("force_redirect_timestamp",Date.now().toString()));const{data:s,error:n}=await c.auth.signInWithPassword({email:e,password:r,options:{persistSession:!0}});if(!n&&(s!=null&&s.user)){if(console.log(`[supabaseClient] Sign-in successful for ${e}, checking group admin status`),t){console.log(`[supabaseClient] Setting group admin metadata for ${e}`);try{const{data:i,error:a}=await c.auth.updateUser({data:{is_group_admin:!0,role:"dealer_group_admin"}});a?console.warn("[supabaseClient] Could not update user metadata:",a):console.log("[supabaseClient] Updated user metadata for group admin:",i);const{error:o}=await c.from("profiles").update({is_group_admin:!0,role:"dealer_group_admin"}).eq("id",s.user.id);o?console.warn("[supabaseClient] Could not update profile:",o):console.log("[supabaseClient] Updated profile for group admin")}catch(i){console.error("[supabaseClient] Error setting group admin status:",i)}return console.log("[supabaseClient] Performing immediate redirect for group admin test user"),sessionStorage.setItem("auth_redirect_authorized","true"),setTimeout(()=>{window.location.href="/test-login-redirect"},500),{data:{...s,user:{...s.user,user_metadata:{...s.user.user_metadata,is_group_admin:!0,role:"dealer_group_admin"}}},isGroupAdmin:!0,forceRedirect:!0,redirectPath:"/test-login-redirect",message:"Group admin test user logged in successfully"}}console.log(`[supabaseClient] Checking group admin status for ${e}`);try{const{data:i,error:a}=await c.from("profiles").select("is_group_admin, role, dealership_id").eq("id",s.user.id).maybeSingle();if(console.log("[supabaseClient] Test user profile data:",i),i!=null&&i.is_group_admin){console.log(`[supabaseClient] User ${e} is a group admin`);const{data:o,error:u}=await c.auth.updateUser({data:{is_group_admin:!0,role:i.role||"dealer_group_admin"}});return u?console.warn("[supabaseClient] Could not update user metadata:",u):console.log("[supabaseClient] Updated user metadata for group admin"),{data:s,isGroupAdmin:!0,message:"Group admin test user logged in successfully"}}}catch(i){console.error("[supabaseClient] Error checking group admin status:",i)}return{data:s,message:"Test user logged in successfully"}}return s!=null&&s.session?{data:s,message:"Test user logged in successfully"}:{error:n,message:"Failed to log in test user"}}catch(t){return console.error("[supabaseClient] Exception in loginTestUser:",t),{error:t instanceof Error?t:new Error("Unknown error during test login")}}},C={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,USE_MOCK_SUPABASE:void 0,VITE_API_URL:void 0,VITE_DEALERSHIP1_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsanhicmdka2pkknp4YmVmY3poIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM1OTg4MjUsImV4cCI6MjA0OTE1MDgyNX0.VWL41oHBXMd65rh0-9ky9z8r3-IxJl_TGzCJiV5CZTY",VITE_DEALERSHIP1_SUPABASE_URL:"https://cljxbrgdkjdrzxbefczh.supabase.co",VITE_SUPABASE_ANON_KEY:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1Z2p0b2t5ZHZiY3ZtcnBleml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTk3NjUsImV4cCI6MjA2MTI5NTc2NX0.XCNQoJbGQiXuyR_CFevro1Y8lqvh2_jmjrD181UYtY4",VITE_SUPABASE_URL:"https://iugjtokydvbcvmrpeziv.supabase.co"};async function Y(){const{error:e}=await c.auth.signOut();if(e)throw console.error("Sign out error:",e),e}const j=async e=>{try{console.log("[apiService] Fetching dealerships",e?`for group ${e}`:"");let r=c.from("dealerships").select("*, dealership_groups(name)").order("name");const{data:t,error:s}=await r;if(s)throw console.error("[apiService] Error fetching dealerships:",s),s;return console.log("[apiService] Fetched dealerships:",t),t}catch(r){throw console.error("[apiService] Exception in getDealerships:",r),r}},A=async(e,r)=>{try{console.log(`[apiService] Logging schema operation: ${e}`,r);try{const{data:t,error:s}=await c.from("logs").insert({action:e,details:r}).select().single();return s?(console.log("[apiService] Error logging schema operation, continuing silently:",s.message),!0):(console.log("[apiService] Logged schema operation:",t),!0)}catch{return console.log("[apiService] Schema operation logging failed, continuing silently"),!0}}catch{return console.log("[apiService] Exception in logSchemaOperation, continuing silently"),!0}},D=async e=>{try{console.log("Fetching Supabase config for dealership:",e);const{data:r,error:t}=await c.from("dealerships").select("id, name, schema_name, supabase_url, supabase_key").eq("id",e).single();if(t)throw console.error("Error fetching dealership Supabase config:",t),t;if(!r)throw new Error(`No dealership found with ID ${e}`);if(!r.supabase_url||!r.supabase_key){const s=r.schema_name||`dealership_${e}`,n=`VITE_${s.toUpperCase()}_SUPABASE_URL`,i=`VITE_${s.toUpperCase()}_SUPABASE_ANON_KEY`,a=C[n]||"",o=C[i]||"";return!a||!o?(console.warn(`No Supabase config found for dealership ${e} in either database or environment`),null):{id:r.id,name:r.name,schema_name:s,supabase_url:a,supabase_key:o}}return r}catch(r){return console.error("Failed to get dealership Supabase config:",r),null}},U=async e=>{try{const r=await D(e);if(!r||!r.supabase_url||!r.supabase_key)return{success:!1,message:"Missing Supabase configuration for this dealership"};const t=createClient(r.supabase_url,r.supabase_key),{data:s,error:n}=await t.rpc("get_pg_version");return n?(console.error("Error testing dealership connection:",n),{success:!1,message:`Connection failed: ${n.message}`,error:n}):{success:!0,message:"Connection successful",data:s,config:r}}catch(r){return console.error("Failed to test dealership connection:",r),{success:!1,message:`Connection test failed: ${r}`,error:r}}},G=async(e,r)=>{try{console.log(`Creating user in dealership ${e}:`,{email:a.email,name:`${a.first_name} ${a.last_name}`,role:a.role_id});const t=await U(e);if(!t.success)throw new Error(`Cannot connect to dealership Supabase: ${t.message}`);const s=getDealershipSupabase(e),{data:n,error:i}=await s.auth.admin.createUser({email:a.email,password:a.password,email_confirm:!0,user_metadata:{first_name:a.first_name,last_name:a.last_name,full_name:`${a.first_name} ${a.last_name}`,role_id:a.role_id,dealership_id:e}});if(i)throw console.error("Error creating user in auth system:",i),i;if(!n.user)throw new Error("User creation failed - no user returned");const{data:a,error:o}=await s.from("users").insert({id:n.user.id,first_name:a.first_name,last_name:a.last_name,email:a.email,role_id:a.role_id,dealership_id:e,phone_number:a.phone_number}).select().single();if(o){console.error("Error adding user to public.users table:",o);try{await s.auth.admin.deleteUser(n.user.id)}catch(u){console.error("Error cleaning up auth user after failure:",u)}throw o}return await A("create_dealership_user",{dealership_id:e,user_id:n.user.id,email:a.email,role_id:a.role_id}),{success:!0,user:{...n.user,...a}}}catch(t){return console.error(`Failed to create user in dealership ${e}:`,t),{success:!1,error:t}}},z=async e=>{try{const r=await U(e);if(!r.success)throw new Error(`Cannot connect to dealership Supabase: ${r.message}`);const t=getDealershipSupabase(e),{data:s,error:n}=await t.from("users").select(`
        id, 
        first_name, 
        last_name, 
        email, 
        role_id,
        phone_number,
        roles(name)
      `).order("last_name",{ascending:!0});if(n)throw console.error(`Error fetching users from dealership ${e}:`,n),n;return s||[]}catch(r){throw console.error(`Failed to get users from dealership ${e}:`,r),r}},O=async(e,r,t)=>{console.log("[apiService] Getting deals for user:",e,"from:",r,"to:",t);try{const{data:s,error:n}=await c.from("deals").select("*").eq("salesperson_id",e).gte("sale_date",r).lte("sale_date",t);if(n)throw console.error("[apiService] Error fetching deals:",n),n;return console.log(`[apiService] Found ${(s==null?void 0:s.length)||0} deals`),s||[]}catch(s){throw console.error("[apiService] Unexpected error fetching deals:",s),s}},M=async(e,r,t)=>{console.log("[apiService] Getting days off for user:",e);try{const{data:s,error:n}=await c.from("schedule").select("*").eq("user_id",e).gte("date",r).lte("date",t).eq("is_day_off",!0);if(n)return console.error("[apiService] Error fetching schedule:",n),[5,8,15,18,25,27,29];const i=(s==null?void 0:s.map(a=>new Date(a.date).getDate()))||[];return console.log("[apiService] Days off this month:",i),i.length===0?(console.log("[apiService] No days off found, using default pattern"),[5,8,15,18,25,27,29]):i}catch(s){return console.error("[apiService] Unexpected error fetching schedule:",s),[5,8,15,18,25,27,29]}},R=(e,r)=>{let t=0;for(let s=1;s<=Math.min(10,e);s++)!r.includes(s)&&s%3===0&&t++;if(e>10)for(let s=11;s<=Math.min(20,e);s++)!r.includes(s)&&s%2===0&&t++;if(e>20)for(let s=21;s<=e;s++)r.includes(s)||t++;return console.log(`[apiService] Expected sales by day ${e}:`,t),t},k=(e,r,t,s=15)=>{const n=R(r,t),i=e.length,a=i/(n||1);let o="neutral";a>=1?o="on-track":a>=.8?o="slightly-behind":o="behind";const u=Math.min(100,Math.round(i/s*100));return console.log("[apiService] Goal progress calculation:",{currentDay:r,expectedSales:n,actualSales:i,progressRatio:a,status:o,progressPercentage:u}),{expected:n,actual:i,progress:u,status:o,progressRatio:a}},B=async e=>{const r=new Date,t=r.getFullYear(),s=r.getMonth(),n=r.getDate(),i=new Date(t,s,1).toISOString().split("T")[0],a=new Date(t,s+1,0).toISOString().split("T")[0];try{const[o,u]=await Promise.all([O(e,i,a),M(e,i,a)]),g=k(o,n,u);return{deals:o,daysOff:u,progressMetrics:g,daysInMonth:new Date(t,s+1,0).getDate(),currentDay:n}}catch(o){throw console.error("[apiService] Error in getGoalTrackingData:",o),o}},V=async(e,r)=>{try{console.log(`[apiService] Logging finance manager deal to schema: ${e}`);const t=await I();if(!t)throw new Error("Not authenticated");const s={user_id:t.id,deal_number:r.deal_number||`D${Math.floor(1e3+Math.random()*9e3)}`,stock_number:r.stock_number||"",vin:r.vin||"",customer_name:r.customer_name,vehicle:r.vehicle,sale_date:r.sale_date||new Date().toISOString().split("T")[0],amount:r.amount||0,products:r.products?JSON.stringify(r.products):"[]",profit:r.profit||0,status:r.status||"pending",deal_details:r.deal_details?JSON.stringify(r.deal_details):"{}",created_at:new Date().toISOString(),updated_at:new Date().toISOString()},n=`
      INSERT INTO "${e}".deals (
        user_id, deal_number, stock_number, vin, customer_name, 
        vehicle, sale_date, amount, products, profit, 
        status, deal_details, created_at, updated_at
      ) 
      VALUES (
        '${s.user_id}', 
        '${s.deal_number}', 
        '${s.stock_number}', 
        '${s.vin}', 
        '${s.customer_name}', 
        '${s.vehicle}', 
        '${s.sale_date}', 
        ${s.amount}, 
        '${s.products}', 
        ${s.profit}, 
        '${s.status}', 
        '${s.deal_details}',
        '${s.created_at}',
        '${s.updated_at}'
      )
      RETURNING *;
    `,{data:i,error:a}=await c.rpc("run_sql",{sql_query:n});if(a)throw console.error(`[apiService] Error inserting deal into ${e}:`,a),a;return console.log(`[apiService] Deal logged successfully to ${e}:`,i),{success:!0,deal:i&&i.length>0?i[0]:null,message:"Deal logged successfully"}}catch(t){return console.error("[apiService] Error in logFinanceManagerDeal:",t),{success:!1,message:`Failed to log deal: ${t.message||t}`,error:t}}},X=async(e,r)=>{try{console.log(`[apiService] Getting finance manager deals from schema: ${e}`);const t=await I();if(!t)throw new Error("Not authenticated");const s=(r==null?void 0:r.limit)||50,n=(r==null?void 0:r.offset)||0,i=(r==null?void 0:r.sortBy)||"created_at",a=(r==null?void 0:r.sortDirection)||"desc";let o="";if(r!=null&&r.filter){const f=[];Object.entries(r.filter).forEach(([_,d])=>{d!=null&&(typeof d=="string"?f.push(`${_} ILIKE '%${d}%'`):typeof d=="number"?f.push(`${_} = ${d}`):typeof d=="boolean"?f.push(`${_} = ${d}`):d.start&&d.end&&f.push(`${_} BETWEEN '${d.start}' AND '${d.end}'`))}),f.length>0&&(o=`AND ${f.join(" AND ")}`)}const u=`
      SELECT * FROM "${e}".deals 
      WHERE user_id = '${t.id}' ${o}
      ORDER BY ${i} ${a}
      LIMIT ${s} OFFSET ${n};
    `,g=`
      SELECT COUNT(*) FROM "${e}".deals 
      WHERE user_id = '${t.id}' ${o};
    `,{data:p,error:l}=await c.rpc("run_sql",{sql_query:u});if(l)throw console.error(`[apiService] Error selecting deals from ${e}:`,l),l;const{data:S,error:E}=await c.rpc("run_sql",{sql_query:g});if(E)throw console.error(`[apiService] Error counting deals in ${e}:`,E),E;const y=S&&S.length>0?parseInt(S[0].count):0;return console.log(`[apiService] Retrieved ${p?p.length:0} deals from ${e} (total: ${y})`),{success:!0,deals:p||[],count:y,message:`Retrieved ${p?p.length:0} deals successfully`}}catch(t){return console.error("[apiService] Error in getFinanceManagerDeals:",t),{success:!1,deals:[],count:0,message:`Failed to get deals: ${t.message||t}`,error:t}}},F=async e=>{try{console.log(`[apiService] Getting user limits for dealership: ${e}`);const{data:r,error:t}=await c.from("dealerships").select("*").eq("id",e).single();if(t)throw console.error(`[apiService] Error getting dealership info: ${t.message}`),t;let s={sales_people:10,finance_managers:3,sales_managers:3,general_managers:1,finance_assistants:2,others:2};const n=r.add_ons||[];return n.includes("plus")&&(s={sales_people:15,finance_managers:5,sales_managers:5,general_managers:2,finance_assistants:3,others:3}),n.includes("plusplus")&&(s={sales_people:25,finance_managers:8,sales_managers:8,general_managers:3,finance_assistants:5,others:5}),{success:!0,limits:s,tier:r.tier,add_ons:n}}catch(r){return console.error(`[apiService] Error getting user limits: ${r}`),{success:!1,error:r}}},Z=async(e,r)=>{try{console.log(`[apiService] Checking if dealership ${e} can add user with role ${r}`);const{success:t,limits:s,error:n}=await F(e);if(!t||!s)throw n||new Error("Failed to get user limits");const{data:i,error:a}=await c.from("profiles").select("role").eq("dealership_id",e);if(a)throw console.error(`[apiService] Error counting users: ${a.message}`),a;let o;r.includes("sales")&&!r.includes("manager")?o="sales_people":r.includes("finance")&&!r.includes("manager")&&!r.includes("director")?o="finance_assistants":r.includes("finance")&&(r.includes("manager")||r.includes("director"))?o="finance_managers":r.includes("sales")&&r.includes("manager")?o="sales_managers":r.includes("general")&&r.includes("manager")?o="general_managers":o="others";const u=i.filter(l=>o==="sales_people"?l.role.includes("sales")&&!l.role.includes("manager"):o==="finance_assistants"?l.role.includes("finance")&&!l.role.includes("manager")&&!l.role.includes("director"):o==="finance_managers"?l.role.includes("finance")&&(l.role.includes("manager")||l.role.includes("director")):o==="sales_managers"?l.role.includes("sales")&&l.role.includes("manager"):o==="general_managers"?l.role.includes("general")&&l.role.includes("manager"):!["sales_people","finance_managers","sales_managers","general_managers","finance_assistants"].includes(J(l.role))).length,g=s[o];return{success:!0,canAdd:u<g,currentCount:u,limit:g}}catch(t){return console.error(`[apiService] Error checking if can add user: ${t}`),{success:!1,canAdd:!1,error:t}}};function J(e){return e.includes("sales")&&!e.includes("manager")?"sales_people":e.includes("finance")&&!e.includes("manager")&&!e.includes("director")?"finance_assistants":e.includes("finance")&&(e.includes("manager")||e.includes("director"))?"finance_managers":e.includes("sales")&&e.includes("manager")?"sales_managers":e.includes("general")&&e.includes("manager")?"general_managers":"others"}export{L as a,F as b,Z as c,j as d,z as e,G as f,B as g,Y as h,N as i,X as j,V as k,A as l,c as s};
//# sourceMappingURL=sales-BUUlxhJ0.js.map
